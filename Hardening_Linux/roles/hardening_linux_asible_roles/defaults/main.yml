---

sysctl_config:
  # These settings eliminate an entire class of security vulnerabilities:
  # time-of-check-time-of-use cross-privilege attacks using guessable
  # filenames (generally seen as "/tmp file race" vulnerabilities).
  - { name: fs.protected_hardlinks, value: 1 }
  - { name: fs.protected_symlinks, value: 1 }

  # For more info on the following settings see: https://www.kernel.org/doc/html/latest/admin-guide/sysctl/fs.html
  # Restrict FIFO special device creation behavior
  - { name: fs.protected_fifos, value: 1 }
  # Restrict regular files creation behavior
  - { name: fs.protected_regular, value: 2 }

  # Prevent core dumps with SUID. These are usually only
  # needed by developers and may contain sensitive information. | sysctl-31
  - { name: fs.suid_dumpable, value: 0 }

  # Controls whether core dumps will append the PID to the core filename
  # Useful for debugging multi-threaded applications
  - { name: kernel.core_uses_pid, value: 1 }

  # When an attacker is trying to exploit the local kernel, it is often
  # helpful to be able to examine where in memory the kernel, modules,
  # and data structures live. As such, kernel addresses should be treated
  # as sensitive information.
  #
  # Many files and interfaces contain these addresses (e.g. /proc/kallsyms,
  # /proc/modules, etc), and this setting can censor the addresses. A value
  # of "0" allows all users to see the kernel addresses. A value of "1"
  # limits visibility to the root user, and "2" blocks even the root user.
  #
  # Some off-the-shelf malware exploit kernel addresses exposed
  # via /proc/kallsyms so by not making these addresses easily available
  # we increase the cost of such attack some what; now such malware has
  # to check which kernel Tails is running and then fetch the corresponding
  # kernel address map from some external source. This is not hard,
  # but certainly not all malware has such functionality. | Tails-2
  - { name: kernel.kptr_restrict, value: 2 }

  # kexec is dangerous: it enables replacement of the running kernel. | Tails-3
  - { name: kernel.kexec_load_disabled, value: 1 }

  # This setting controls how the kernel behaves towards module changes at
  # runtime. Setting to 1 will disable module loading at runtime.
  # Setting it to 0 is actually never supported. | sysctl-29
  # kernel.modules_disabled: 1

  # Magic Sysrq should be disabled, but can also be set to a safe value if so
  # desired for physical machines. It can allow a safe reboot if the system hangs
  # and is a 'cleaner' alternative to hitting the reset button. | sysctl-30
  # The following values are permitted:
  # * **0**   - disable sysrq
  # * **1**   - enable sysrq completely
  # * **>1**  - bitmask of enabled sysrq functions:
  # * **2**   - control of console logging level
  # * **4**   - control of keyboard (SAK, unraw)
  # * **8**   - debugging dumps of processes etc.
  # * **16**  - sync command
  # * **32**  - remount read-only
  # * **64**  - signalling of processes (term, kill, oom-kill)
  # * **128** - reboot/poweroff
  # * **256** - nicing of all RT tasks
  - { name: kernel.sysrq, value: 0 }

  # Virtual memory regions protection | sysctl-32
  - { name: kernel.randomize_va_space, value: 2 }

  # The PTRACE system is used for debugging.  With it, a single user process
  # can attach to any other dumpable process owned by the same user.  In the
  # case of malicious software, it is possible to use PTRACE to access
  # credentials that exist in memory (re-using existing SSH connections,
  # extracting GPG agent information, etc).
  #
  # A PTRACE scope of "0" is the more permissive mode.  A scope of "1" limits
  # PTRACE only to direct child processes (e.g. "gdb name-of-program" and
  # "strace -f name-of-program" work, but gdb's "attach" and "strace -fp $PID"
  # do not).  The PTRACE scope is ignored when a user has CAP_SYS_PTRACE, so
  # "sudo strace -fp $PID" will work as before.  For more details see:
  # https://wiki.ubuntu.com/SecurityTeam/Roadmap/KernelHardening#ptrace
  #
  # For applications launching crash handlers that need PTRACE, exceptions can
  # be registered by the debuggee by declaring in the segfault handler
  # specifically which process will be using PTRACE on the debuggee:
  #   prctl(PR_SET_PTRACER, debugger_pid, 0, 0, 0);
  #
  # In general, PTRACE is not needed for the average running Ubuntu system.
  # To that end, the default is to set the PTRACE scope to "1".  This value
  # may not be appropriate for developers or servers with only admin accounts.
  # kernel.yama.ptrace_scope = 1
  - { name: kernel.yama.ptrace_scope, value: 1 }

  # Disable traffic forwarding.
  # Setting the flag to 0 ensures that a system with multiple interfaces (for example, a hard
  # proxy), will never be able to forward packets, and therefore, never serve as a router.
  # | sysctl-01 | sysctl-19
  - { name: net.ipv4.ip_forward, value: 0 }
  - { name: net.ipv6.conf.all.forwarding, value: 0 }

  # Enable RFC-recommended source validation feature.
  # If the return packet does not go out the same interface that the corresponding
  # source packet came from, the packet is dropped (and logged if log_martians is set).
  # | sysctl-02
  - { name: net.ipv4.conf.all.rp_filter, value: 1 }
  - { name: net.ipv4.conf.default.rp_filter, value: 1 }

  # Reduce the surface on SMURF attacks. | sysctl-04
  # Make sure to ignore ECHO broadcasts, which are only required in broad network analysis.
  - { name: net.ipv4.icmp_echo_ignore_broadcasts, value: 1 }

  # Some routers (and some attackers) will send responses that violate RFC-1122 and attempt
  # to fill up a log file system with many useless error messages.
  # | sysctl-03
  - { name: net.ipv4.icmp_ignore_bogus_error_responses, value: 1 }

  # Limit the amount of traffic the system uses for ICMP. | sysctl-05
  - { name: net.ipv4.icmp_ratelimit, value: 100 }

  # Adjust the ICMP ratelimit to include ping, dst unreachable,
  # source quench, ime exceed, param problem, timestamp reply, information reply | sysctl-06
  - { name: net.ipv4.icmp_ratemask, value: 88089 }

  # Disable TCP timestamps in order to not reveal system uptime. | sysctl-07
  - { name: net.ipv4.tcp_timestamps, value: 0 }

  # Define restriction level for announcing the local source IP | sysctl-08
  - { name: net.ipv4.conf.all.arp_ignore, value: 1 }

  # Define mode for sending replies in response to
  # received ARP requests that resolve local target IP addresses | sysctl-09
  - { name: net.ipv4.conf.all.arp_announce, value: 2 }

  # RFC 1337 fix F1 | sysctl-10
  - { name: net.ipv4.tcp_rfc1337, value: 1 }

  # Attackers use SYN flood attacks to perform a denial of service attack on a system
  # by sending many SYN packets without completing the three way handshake.
  # This will quickly use up slots in the kernel's half-open connection queue and
  # prevent legitimate connections from succeeding.
  # SYN cookies allow the system to keep accepting valid connections, even if
  # under a denial of service attack. CIS Distro Independent 3.2.8.
  - { name: net.ipv4.tcp_syncookies, value: 1 }

  # Send(router) or accept(host) RFC1620 shared media redirects | sysctl-12
  - { name: net.ipv4.conf.all.shared_media, value: 1 }
  - { name: net.ipv4.conf.default.shared_media, value: 1 }

  # Stop clients from circumventing the security
  # model by using a source routed network packet | sysctl-13
  - { name: net.ipv4.conf.all.accept_source_route, value: 0 }
  - { name: net.ipv4.conf.default.accept_source_route, value: 0 }
  - { name: net.ipv6.conf.all.accept_source_route, value: 0 }
  - { name: net.ipv6.conf.default.accept_source_route, value: 0 }

  # Disable packet forwarding; device must not act as a router | sysctl-14
  - { name: net.ipv4.conf.all.send_redirects, value: 0 }
  - { name: net.ipv4.conf.default.send_redirects, value: 0 }

  # Log invalid packets containing bogus source addresses | sysctl-15
  - { name: net.ipv4.conf.all.log_martians, value: 1 }
  - { name: net.ipv4.conf.default.log_martians, value: 1 }

  # Respond to packets trying to exploit something | sysctl-16
  # Disable the acceptance of ICMP redirects to prevent MITM attacks.
  # Attackers use ICMP redirects to modify the system routing tables in order to
  # launch man-in-the-middle attacks. Setting these flags to 0 disables this.
  - { name: net.ipv4.conf.default.accept_redirects, value: 0 }
  - { name: net.ipv4.conf.all.accept_redirects, value: 0 }

  # Disable the acceptance of ICMP secure redirects to prevent MITM attacks. | sysctl-17
  - { name: net.ipv4.conf.all.secure_redirects, value: 0 }
  - { name: net.ipv4.conf.default.secure_redirects, value: 0 }
  - { name: net.ipv6.conf.default.accept_redirects, value: 0 }
  - { name: net.ipv6.conf.all.accept_redirects, value: 0 }

  # Do not accept ICMP router advertisement messages. | sysctl-18
  - { name: net.ipv6.conf.all.accept_ra, value: 0 }
  - { name: net.ipv6.conf.default.accept_ra, value: 0 }
  - { name: net.ipv6.conf.default.router_solicitations, value: 0 }
  - { name: net.ipv6.conf.all.router_solicitations, value: 0 }
  - { name: net.ipv6.conf.default.accept_ra_rtr_pref, value: 0 }
  - { name: net.ipv6.conf.default.accept_ra_pinfo, value: 0 }
  - { name: net.ipv6.conf.default.accept_ra_defrtr, value: 0 }

  # Disable IPv6 auto-configuration. | sysctl-19
  - { name: net.ipv6.conf.default.autoconf, value: 0 }
  - { name: net.ipv6.conf.all.autoconf, value: 0 }

  # Protect IPv6 against router advertisements. | sysctl-20
  - { name: net.ipv6.conf.default.dad_transmits, value: 0 }
  - { name: net.ipv6.conf.default.max_addresses, value: 1 }

  # Mitigating attacks relying on memory address leaks.
  # mmap_min_addr should be set to 65536 (64k) to prevent NULL-dereference
  # attacks and other memory corruption attacks.
  # | sysctl-27
  - { name: vm.mmap_min_addr, value: 65536 }

  # Controls the number of bits randomized by mmap base address randomization.
  # Also see the "stack_guard_gap" setting in /proc/sys/vm/ for other memory corruption protection
  # sysctl-33 | sysctl-34
  - { name: vm.mmap_rnd_bits, value: 32 }
  - { name: vm.mmap_rnd_compat_bits, value: 16 }
